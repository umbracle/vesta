syntax = "proto3";

package proto;

option go_package = "/internal/server/proto";

service VestaService {
    rpc Apply(ApplyRequest) returns (ApplyResponse);
    rpc Destroy(DestroyRequest) returns (DestroyResponse);
    rpc DeploymentList(ListDeploymentRequest) returns (ListDeploymentResponse);
    rpc DeploymentStatus(DeploymentStatusRequest) returns (DeploymentStatusResponse);
    rpc CatalogList(CatalogListRequest) returns (CatalogListResponse);
    rpc CatalogInspect(CatalogInspectRequest) returns (CatalogInspectResponse);
}

message CatalogListRequest {
}

message CatalogListResponse {
    repeated string plugins = 1;
}

message CatalogInspectRequest {
    string name = 1;
}

message CatalogInspectResponse {
    Item item = 1;
}

message DestroyRequest {
    string id = 1;
}

message DestroyResponse {
}

message DeploymentStatusRequest {
    string id = 1;
}

message DeploymentStatusResponse {
    Deployment2 allocation = 1;
    repeated Event2 events = 2;
}

message ListDeploymentRequest {
}

message ListDeploymentResponse { 
    repeated Deployment2 allocations = 1;
}

message ApplyRequest {
    // id name of the action
    string action = 1;

    // input for the action
    bytes input = 2;

    // name of the allocation to modify
    string allocationId = 3;

    bool metrics = 4;

    string chain = 5;

    string alias = 6;

    string logLevel = 7;
}

message ApplyResponse {
    string id = 1;
}

// Provisonal name, item is an item on the catalog
message Item {
    string name = 1;
    
    repeated Field fields = 2;

    repeated string chains = 3;

    message Field {
        string name = 1;
        string type = 2;
        string description = 3;
        string default = 4;
        bool required = 5;
    }
}

// Node1 is a node that can allocate resources
message Node {
    string id = 1;
    string datacenter = 2;
    string name = 3;
}

// Task represents an single container process
message Task {
    string image = 1;
    string tag = 2;
    repeated string args = 3;
    map<string,string> env = 4;
    map<string,string> labels = 5;
    repeated string securityOpt = 7;

    // list of data access for this file
    map<string, string> data = 9;

    map<string, Volume> volumes = 11;

    Telemetry telemetry = 12;

    repeated Artifact artifacts = 13;

    bool batch = 14;
    
    message Volume {
        string path = 1;
    }

    message Telemetry {
        uint64 port = 1;
        string path = 2;
    }

    message Artifact {
        string source = 1;
        string destination = 2;
    }
}

// Allocation represents an allocation of a deployment
message Allocation {
    // id of the allocation
    string id = 1;

    // node to which the allocation is assigned
    string nodeId = 2;
    
    // tasks to run on the allocation
    map<string,Task> tasks = 3;

    // state of each of the tasks
    map<string, TaskState> taskStates = 4;

    // status of the allocation
    Status status = 5;

    map<string, SyncStatus> syncStatus = 6;

    // desired status of the allocation
    DesiredStatus desiredStatus = 7;

    // modify index sequence number
    int64 sequence = 8;

    bytes inputState = 9;

    string alias = 10;

    enum Status {
        Pending = 0;
        Running = 1;
        Complete = 2;
        Failed = 3;
    }

    message SyncStatus {
        bool isSynced = 1;
        uint64 currentBlock = 2;
        uint64 highestBlock = 3;
        uint64 numPeers = 4;
    }

    enum DesiredStatus {
        Run = 0;
        Stop = 1;
    }
}

message TaskState {
    State state = 1;

    bool failed = 2;

    uint64 restarts = 3;
    
    string id = 6;

    bool killing = 7;
    
    enum State {
        Pending = 0;
        Running = 1;
        Dead = 2;
    }
}


message Deployment2 {
    string id = 1;
    string name = 2;
    bytes spec = 3;
}

message Event2 {
    string id = 1;
    string task = 2;
    string deployment = 3;
    string type = 4;
}
