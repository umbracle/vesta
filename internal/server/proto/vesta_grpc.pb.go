// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VestaServiceClient is the client API for VestaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VestaServiceClient interface {
	Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*ApplyResponse, error)
	DeploymentList(ctx context.Context, in *ListDeploymentRequest, opts ...grpc.CallOption) (*ListDeploymentResponse, error)
	DeploymentStatus(ctx context.Context, in *DeploymentStatusRequest, opts ...grpc.CallOption) (*DeploymentStatusResponse, error)
}

type vestaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVestaServiceClient(cc grpc.ClientConnInterface) VestaServiceClient {
	return &vestaServiceClient{cc}
}

func (c *vestaServiceClient) Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*ApplyResponse, error) {
	out := new(ApplyResponse)
	err := c.cc.Invoke(ctx, "/proto.VestaService/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vestaServiceClient) DeploymentList(ctx context.Context, in *ListDeploymentRequest, opts ...grpc.CallOption) (*ListDeploymentResponse, error) {
	out := new(ListDeploymentResponse)
	err := c.cc.Invoke(ctx, "/proto.VestaService/DeploymentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vestaServiceClient) DeploymentStatus(ctx context.Context, in *DeploymentStatusRequest, opts ...grpc.CallOption) (*DeploymentStatusResponse, error) {
	out := new(DeploymentStatusResponse)
	err := c.cc.Invoke(ctx, "/proto.VestaService/DeploymentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VestaServiceServer is the server API for VestaService service.
// All implementations must embed UnimplementedVestaServiceServer
// for forward compatibility
type VestaServiceServer interface {
	Apply(context.Context, *ApplyRequest) (*ApplyResponse, error)
	DeploymentList(context.Context, *ListDeploymentRequest) (*ListDeploymentResponse, error)
	DeploymentStatus(context.Context, *DeploymentStatusRequest) (*DeploymentStatusResponse, error)
	mustEmbedUnimplementedVestaServiceServer()
}

// UnimplementedVestaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVestaServiceServer struct {
}

func (UnimplementedVestaServiceServer) Apply(context.Context, *ApplyRequest) (*ApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (UnimplementedVestaServiceServer) DeploymentList(context.Context, *ListDeploymentRequest) (*ListDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeploymentList not implemented")
}
func (UnimplementedVestaServiceServer) DeploymentStatus(context.Context, *DeploymentStatusRequest) (*DeploymentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeploymentStatus not implemented")
}
func (UnimplementedVestaServiceServer) mustEmbedUnimplementedVestaServiceServer() {}

// UnsafeVestaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VestaServiceServer will
// result in compilation errors.
type UnsafeVestaServiceServer interface {
	mustEmbedUnimplementedVestaServiceServer()
}

func RegisterVestaServiceServer(s grpc.ServiceRegistrar, srv VestaServiceServer) {
	s.RegisterService(&VestaService_ServiceDesc, srv)
}

func _VestaService_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VestaServiceServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VestaService/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VestaServiceServer).Apply(ctx, req.(*ApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VestaService_DeploymentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VestaServiceServer).DeploymentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VestaService/DeploymentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VestaServiceServer).DeploymentList(ctx, req.(*ListDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VestaService_DeploymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VestaServiceServer).DeploymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VestaService/DeploymentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VestaServiceServer).DeploymentStatus(ctx, req.(*DeploymentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VestaService_ServiceDesc is the grpc.ServiceDesc for VestaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VestaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.VestaService",
	HandlerType: (*VestaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Apply",
			Handler:    _VestaService_Apply_Handler,
		},
		{
			MethodName: "DeploymentList",
			Handler:    _VestaService_DeploymentList_Handler,
		},
		{
			MethodName: "DeploymentStatus",
			Handler:    _VestaService_DeploymentStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/server/proto/vesta.proto",
}
